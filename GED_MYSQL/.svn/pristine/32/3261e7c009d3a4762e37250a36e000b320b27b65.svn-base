using LAB5GED.DOMAIN.Acessorio;
using LAB5GED.DOMAIN.DAO.Business;
using LAB5GED.DOMAIN.Entidades;
using LAB5GED.MVC.Acessorio;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Transactions;
using System.Web;
using System.Web.Mvc;

namespace LAB5GED.MVC.Controllers
{

    public class DocumentoController : CustomController
    {
        //
        // GET: /Documento/

        DocumentoBO _DAO = new DocumentoBO();
       [PermissaoFiltro("ListarDocumentos")]
        public ActionResult Index()
        {
           
            return View(_DAO.GetAll().OrderByDescending(d=>d.Registro).ToList());
        }

        /// <summary>
        /// NÃO PERMITE EDIÇÃO!!!
        /// </summary>
        /// <returns></returns>
        [PermissaoFiltro("CadastrarDocumento")]
        public ActionResult Cadastrar()
        {
            return View(new Documento());
        }

        [PermissaoFiltro("ListarDocumentosNaoRevisados")]
        public ActionResult ListarDocumentosNaoRevisados()
        {
            return View();

        }

        [PermissaoFiltro("ListarDocumentosNaoRevisados")]
        public ActionResult Revisar(int _registroDocumento)
        {
            try
            {
                return View(_DAO.GetByRegistro(_registroDocumento));
            }
            catch (Exception ex)
            {
                MetodosUtilidadeGeral.MensagemDeErro(ex.Message,this.Response);
                return View(_DAO.GetByRegistro(_registroDocumento));
            }
        }


        public ActionResult Detalhar(int _registroDocumento)
        {
            return View(_DAO.GetByRegistro(_registroDocumento));
        }

        public ActionResult CadastrarDocumento(Documento _novoDocumento, HttpPostedFileBase inputFile)
        {
            bool sucesso = false;
            using (TransactionScope scope = new TransactionScope())
            {
                try
                {

                    HttpPostedFileBase arquivo = Request.Files[0];
                    
                    Stream str = arquivo.InputStream;
                    if (str.Length > 0)
                    {
                        _DAO.SalvarDocumento(_novoDocumento, str);
                        _DAO.RegistrarCapturaDocumento(_novoDocumento.Registro, Seguranca.UsuarioLogado().Registro);
                        sucesso = true;
                    }
                    else throw new Erros.ErroGeral("Nenhum arquivo selecionado.");
                }



                catch (Exception ex)
                {
                    sucesso = false;
                    MetodosUtilidadeGeral.MensagemDeErro(ex.Message, Response);
                    //return View("Cadastrar");
                }

                if (sucesso)
                {
                    scope.Complete();
                    //return RedirectToAction("Index");
                    //vai para indexacao
                    return RedirectToAction("Indexacao", "SubserieIndiceValor", new {_registroDocumento = _novoDocumento.Registro });
                }
                else return View("Cadastrar");

            }
        }
        [PermissaoFiltro("ExcluirDocumento")]
        public ActionResult ExcluirDocumento(string Id)
        {
            try
            {
                _DAO.ExluirDocumento(_DAO.GetByRegistro(int.Parse(Id)));
                return RedirectToAction("ListarDocumentosNaoRevisados", "Documento");
            }
            catch (Exception ex)
            {
                MetodosUtilidadeGeral.MensagemDeErro("Não foi possível excluir o documento. " + ex.Message, Response);
                return View("ListarDocumentosNaoRevisados",_DAO.GetDocumentosNaoRevisado());
            }

        }

        public ActionResult ConcluirCaptura(int _registroDocumento)
        {
            return View(_registroDocumento);
        }


        
        public ActionResult ArmazenarDocumento(int _registroDocumento, int _registroCaixa)
        {
            try
            {

                _DAO.ArmazenarDocumento(_registroDocumento, _registroCaixa);
                return View("DocumentosNaoArmazenados",_DAO.DocumentosNaoArmazenados());
            }
            catch (Exception ex)
            {
                MetodosUtilidadeGeral.MensagemDeErro(ex.Message, Response);
                return View("DocumentosNaoArmazenados");
            }

        }

        public ActionResult RevisarDocumento(int _registroDocumento)
        {
            try
            {
                if (!_DAO.DocumentoRevisado(_registroDocumento))
                {
                    _DAO.RegistrarRevisaoDocumento(_registroDocumento, Seguranca.UsuarioLogado().Registro);
                    MetodosUtilidadeGeral.MensagemDeSucesso("Revisão concluída com sucesso!", this.Response);
                    
                }
                return RedirectToAction("ListarDocumentosNaoRevisados", "Documento");
            }
            catch (Exception ex)
            {
                MetodosUtilidadeGeral.MensagemDeErro(ex.Message, this.Response);
                return View("Revisar", new { _registroDocumento = _registroDocumento });
            }

        }

        public ActionResult DocumentosNaoArmazenados()
        {
            return View(_DAO.DocumentosNaoArmazenados());
        }

        public FileStreamResult Visualizar(int _registro)
        {
            Documento doc = _DAO.GetByRegistro(_registro);
          
            return File(_DAO.GetStreamDocumento(doc), "application/pdf");

        }
    }

    
}
